// --------------------------------------------------------------------
// Generic stuff here; (move to common/generic.wppl?)

// TODO: eliminate reverse() by writing reduceRight
var foldData = function(initialState, timeStep, observations) {
  return reduce(
    function(obs, states){
      var nextState = timeStep(states[states.length-1], obs);
      return states.concat(nextState);
    },
    [initialState],
    observations.reverse())
};

var model = function(dataSequences) {
  var params = makeParams();  
  var timeStep = makeTimeStep(params);
  return mapData(
    { data: dataSequences },
    function(sequence) {
      var initialState = sampleInitialState(params);
      return foldData(initialState, timeStep, sequence);
    }
  );
};


// --------------------------------------------------------------------
// Application-specific stuff here

var squish = function(x) {
  return 1 / (1 + Math.exp(-x))
}

// shared global parameters
var makeParams = function() {
  return {
    theta: paramScalar(0, 0.001, 'theta')
  };
}

// Each coin flip is independent conditioned on the coin weight
// This does not directly depend on the params, only indirectly via initial state
var makeTimeStep = function(params) {
  return function(state, observation) {
    var outcome = observe(Bernoulli({ p: state.p }), observation);
    var nextState = state;  // more complicated models would use state transition here
    return nextState;
  };
};

// Per-coin persistent state
var sampleInitialState = function(params) {
  return {
    p: squish(gaussian(params.theta, 1))
  };
};

