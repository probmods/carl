// --------------------------------------------------------------------
// Generic stuff here; (move to common/generic.wppl?)

// TODO: eliminate reverse() by writing reduceRight
var foldData = function(init, timeStep, observations) {
  return reduce(
    function(x, acc){
      return acc.concat(timeStep(acc[acc.length-1], x));
    },
    [init],
    observations.reverse())
};

var model = function(dataSequences) {
  var timeStep = makeTimeStep();
  mapData(
    { data: dataSequences },
    function(sequence) {
      var initialState = sampleInitialState();
      return foldData(initialState, timeStep, sequence);
    }
  );
};


// --------------------------------------------------------------------
// Application-specific stuff here

var squish = function(x) {
  return 1 / (1 + Math.exp(-x))
}

// We ignore the previous (empty) state, coin flips are i.i.d.
var makeTimeStep = function() {
  var theta = paramScalar(0, 0.001, 'theta');
  var p = squish(theta);
  return function(state, observation) {
    var outcome = observe(Bernoulli({ p: p }), observation);
    return outcome;
  };
};

// We don't have per-coin persistent state
var sampleInitialState = function() {
  return {};
};

